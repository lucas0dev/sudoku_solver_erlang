.PHONY: fix-slim-release test

all: compile nitrogen_js_css

REBAR?=./rebar3

cookie:
	@echo Generating a default cookie in /etc/vm.args
	@(echo -setcookie `openssl rand -base64 50 | head -n1 | sed -e 's/[^a-zA-Z0-9]//g'` >> etc/vm.args)

compile: rebar3
	@($(REBAR) compile)

eunit:
	@($(REBAR) eunit)

rebar3:
	@echo "Fetching and compiling updated rebar3 (this will not replace your system-wide rebar3, if you have one)"
	@(cd /tmp && \
	git clone https://github.com/erlang/rebar3 && \
	cd rebar3 && \
	./bootstrap)
	@(mv /tmp/rebar3/rebar3 .)
	@(rm -fr /tmp/rebar3)


release: rebar3
	@(./make_version_file.escript go && \
	etc/assemble_config.escript etc etc/autogenerated.config.all && \
	$(REBAR) release && \
	make finish_version)

revert_version:
	./make_version_file.escript revert

finish_version:
	./make_version_file.escript finish

upgrade_running:
	./make_version_file.escript go && \
	./upgrade_release.sh && \
	make finish_version

## Just an alias for daemon
start: daemon

## This path is set during project creation.  If you decide to change the
## name of your application or make multiple release versions, you'll very
## likely need to revise this path
daemon: release
	_build/default/rel/sudoku_erlang/bin/sudoku_erlang daemon

## This path is set during project creation.  If you decide to change the
## name of your application or make multiple release versions, you'll very
## likely need to revise this path
attach: _build/default/rel/sudoku_erlang/bin/sudoku_erlang
	_build/default/rel/sudoku_erlang/bin/sudoku_erlang attach

_build/default/rel/sudoku_erlang/bin/sudoku_erlang:
	@echo "ERROR: There is no release built to attach to."
	@exit 1;

run:
	@echo "Close but no cigar..."
	@echo "You can do either 'make run_dev' or 'make run_release'"

run_release: release
	@($(REBAR) run)

run_dev: rebar3
	@($(REBAR) shell --eval "sync:go().")
	
upgrade_deps: rebar3
	@($(REBAR) upgrade)

nitrogen_js_css: priv/static/nitrogen

copy-static:
	@(escript copy_static.escript copy)

link-static:
	@(escript copy_static.escript link)

## If the _build directory doesn't exist, we need to pull the dependencies
_build: deps

plugins: _build
	@(escript do-plugins.escript)

rebar2_links: site site/static site/src site/templates site/include

site:
	@echo Making Nitrogen 2 compatible directory structure symlinks
	@(mkdir -p site)

site/static:
	@(ln -s ../priv/static site/static)

site/src:
	@(ln -s ../src site/src)

site/templates:
	@(ln -s ../priv/templates site/templates)

site/include:
	@(ln -s ../include site/include)

priv/static/nitrogen: link-static

dialyzer: rebar3
	@($(REBAR) dialyzer)

dev:
	mkdir -p _checkouts
	git clone https://github.com/nitrogen/nitrogen_core -b rebar3 	_checkouts/nitrogen_core
	git clone https://github.com/nitrogen/nprocreg			_checkouts/nprocreg
	git clone https://github.com/nitrogen/simple_bridge		_checkouts/simple_bridge
	git clone https://github.com/nitrogen/rekt 				_checkouts/rekt
	git clone https://github.com/nitrogen/nitro_cache  		_checkouts/nitro_cache
	git clone https://github.com/nitrogen/canister  		_checkouts/canister
	git clone https://github.com/choptastic/qdate  			_checkouts/qdate
	git clone https://github.com/rustyio/sync 				_checkouts/sync

deps: rebar3
	@(./rebar3 deps)


## This is only used during an upgrade from rebar2 to rebar3, generally
fix-deps: rebar3
	@echo "Pulling dependencies"
	@(./rebar3 deps)
	@echo "Using the pulled dependencies to populate the relx application list"
	@(./update_config_to_rebar3.escript rebar.config fix_relx_apps)
